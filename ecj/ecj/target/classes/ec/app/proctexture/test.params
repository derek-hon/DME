parent.0 = ./common.params
#-------------------------------------------------------------------------------------------------- PSDEvoArt/E16.params


# ======= Problem =======

# Evaluator and problems specifications
eval.problem = ec.proctexture.HistogramFitness
eval.problem.data = ec.proctexture.MultiData

eval.problem.target = src/main/java/ec/proctexture/sunsetSmall.png

# Using IEASIndividual, we're associating a BufferedImage phenotype with each individual
pop.subpop.0.species.ind = ec.proctexture.TextureIndividual
#(Gray) Each individual has a single tree
#(RGB) Each individual has 3 trees
pop.subpop.0.species.ind.numtrees = 3
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0
pop.subpop.0.species.ind.tree.1 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.1.tc = tc0
pop.subpop.0.species.ind.tree.2 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.2.tc = tc0

# ======= Stats =======
# Files are streams relative to this config,
# folders are relative to the working directory.
stat = ec.simple.SimpleStatistics
stat.file = out.stat
stat.num-children=2
stat.child.0 = ec.gp.koza.KozaShortStatistics
stat.child.0.do-depth = true
stat.child.0.do-size  = true
stat.child.0.do-time  = true
stat.child.1 = ec.proctexture.SaveImagesStatistics
stat.child.1.dir = src/main/java/ec/proctexture/Results/Renderings/
stat.child.1.onlybest = true


# ======= GP Params =======
# Basically, run until user says stop.
# User saying "stop" /is/ the "run-complete", so it had better be true!
quit-on-run-complete = false

generations = 500
current-job = 0
jobs = 1
breedthreads = 1
evalthreads  = 1
seed.1 = time

pop.subpop.0.size = 1500
pop.subpop.0.duplicate-retries = 2


# ======= Nodes =======
# We have some functions.  They are:
gp.fs.0.size = 28
#
# Direct Variables (2)
gp.fs.0.func.0  = ec.proctexture.Func_Variable$Pos_X
gp.fs.0.func.0.nc  = nc0
gp.fs.0.func.1  = ec.proctexture.Func_Variable$Pos_Y
gp.fs.0.func.1.nc  = nc0
#
# Math (10):
gp.fs.0.func.2 = ec.proctexture.Func_Math$Add
gp.fs.0.func.2.nc = nc2
gp.fs.0.func.3 = ec.proctexture.Func_Math$Sub
gp.fs.0.func.3.nc = nc2
gp.fs.0.func.4 = ec.proctexture.Func_Math$Mul
gp.fs.0.func.4.nc = nc2
gp.fs.0.func.5 = ec.proctexture.Func_Math$Div
gp.fs.0.func.5.nc = nc2
gp.fs.0.func.6 = ec.proctexture.Func_Math$Sin
gp.fs.0.func.6.nc = nc1
gp.fs.0.func.7 = ec.proctexture.Func_Math$Cos
gp.fs.0.func.7.nc = nc1
gp.fs.0.func.8 = ec.proctexture.Func_Math$Max
gp.fs.0.func.8.nc = nc2
gp.fs.0.func.9 = ec.proctexture.Func_Math$Min
gp.fs.0.func.9.nc = nc2
gp.fs.0.func.10 = ec.proctexture.Func_Math$Exp
gp.fs.0.func.10.nc = nc1
gp.fs.0.func.11 = ec.proctexture.Func_Math$Neg
gp.fs.0.func.11.nc = nc1
#
# Conditionals (1)
gp.fs.0.func.12 = ec.proctexture.Func_Conditional$IfGT
gp.fs.0.func.12.nc = nc4
#
# Ephemerals (3)
gp.fs.0.func.13 = ec.proctexture.Func_Ephemeral$Eph_1
gp.fs.0.func.13.nc = nc0
gp.fs.0.func.14 = ec.proctexture.Func_Ephemeral$Eph_10
gp.fs.0.func.14.nc = nc0
gp.fs.0.func.15 = ec.proctexture.Func_Ephemeral$Eph_100
gp.fs.0.func.15.nc = nc0
#
# Extended functions (12)
gp.fs.0.func.16 = ec.proctexture.Func_Math$Abs
gp.fs.0.func.16.nc = nc1
gp.fs.0.func.17 = ec.proctexture.Func_Math$Pow
gp.fs.0.func.17.nc = nc2
gp.fs.0.func.18 = ec.proctexture.Func_Math$Log10
gp.fs.0.func.18.nc = nc1
gp.fs.0.func.19 = ec.proctexture.Func_Math$LogE
gp.fs.0.func.19.nc = nc1
gp.fs.0.func.20 = ec.proctexture.Func_Math$Floor
gp.fs.0.func.20.nc = nc1
gp.fs.0.func.21 = ec.proctexture.Func_Math$Ceil
gp.fs.0.func.21.nc = nc1
gp.fs.0.func.22 = ec.proctexture.Func_Math$Tan
gp.fs.0.func.22.nc = nc1
gp.fs.0.func.23 = ec.proctexture.Func_Math$Sqrt
gp.fs.0.func.23.nc = nc1
gp.fs.0.func.24 = ec.proctexture.Func_Math$Square
gp.fs.0.func.24.nc = nc1
gp.fs.0.func.25 = ec.proctexture.Func_Math$Cube
gp.fs.0.func.25.nc = nc1
gp.fs.0.func.26 = ec.proctexture.Func_Math$Avg
gp.fs.0.func.26.nc = nc2
gp.fs.0.func.27 = ec.proctexture.Func_Math$Lerp
gp.fs.0.func.27.nc = nc3


# ======= Reproduction Params =======

# Elitism would be kinda weird when there's only a handful of discrete fitness values
# User can configure to permit a few of their favourites.
breed.elite.0 = 1

# Crossover, Mutation, Ephemeral adjustment, Reproduction
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
pop.subpop.0.species.pipe.num-sources = 4
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.9
pop.subpop.0.species.pipe.source.1 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.3
pop.subpop.0.species.pipe.source.2 = ec.gp.breed.MutateERCPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.1
pop.subpop.0.species.pipe.source.3 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.3.prob = 0.0

# Pick some random node, in which ERCs will be mutated.
# Terminal/Non-terminal selection is defined elsewhere.
# If we pick a non-terminal, it'll try children, so, whatever.
gp.breed.mutate-erc.source.0 = ec.select.TournamentSelection
gp.breed.mutate-erc.ns.0 = ec.gp.koza.KozaNodeSelector

# Crossover will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.maxdepth = 17
gp.koza.xover.tries = 1

# Point Mutation will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
# and GROW for building.  Also, Point Mutation uses a GrowBuilder
# by default, with a default of min-depth=max-depth=5
# as shown a ways below
gp.koza.mutate.source.0 = ec.select.TournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 17
gp.koza.mutate.tries = 1

# The default tournament size for TournamentSelection is 7
# That's pretty heavy.
select.tournament.size = 3

# Since GROW is only used for subtree mutation, ECJ uses
# the Koza-standard subtree mutation GROW values for the
# default for GROW as a whole.
gp.koza.grow.min-depth = 5
gp.koza.grow.max-depth = 5

# Here we define the default values for KozaNodeSelection;
# The default is 10% terminals, 90% nonterminals when possible,
# 0% "always pick the root", 0% "pick any node"
gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0

# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# with a grow probability of 0.5
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)
gp.tc.0.init = ec.gp.koza.HalfBuilder
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5
